import { StyleSheet, View, Modal, ActivityIndicator, Text, Image, TouchableOpacity, SectionList, FlatList, Animated } from 'react-native';
import React, { useState, useEffect } from 'react'
import AsyncStorage from '@react-native-async-storage/async-storage';
import ICAL from 'ical.js'
import { StatusBar } from 'expo-status-bar';

import Header from '../Components/Header';
import Loader from '../Components/Loader';
import EventContainer from './EventsPageScreens/EventContainer';

export default function EventsPage({ navigation }) {

    const [kalender, setKalender] = useState('')

    const [loading, setLoading] = useState(true)

    const currentDate = new Date()



    let listEvents = [];


    //CATEGORIES:
    //Arbeiten, Fortbildung, Events, Abitur, Ferien, Schulwochen, Konferenzen, ElterngesprÃ¤ch, Lehren und Lernen


    useEffect(() => {


        AsyncStorage.getItem('kalender').then(value => {

            const jcalData = ICAL.parse(value);

            const comp = new ICAL.Component(jcalData);
            const vevent = comp.getAllSubcomponents()

            vevent.forEach(element => {
                if (element.getFirstPropertyValue("summary") != undefined) {

                    const eventEndDate = new Date(element.getFirstPropertyValue("dtend").year + '-' + addLeadingZeros(element.getFirstPropertyValue("dtend").month, 2) + '-' + addLeadingZeros(element.getFirstPropertyValue("dtend").day, 2))
                    const eventStartDate = new Date(element.getFirstPropertyValue("dtstart").year + '-' + addLeadingZeros(element.getFirstPropertyValue("dtstart").month, 2) + '-' + addLeadingZeros(element.getFirstPropertyValue("dtstart").day, 2))


                    if (isDateInFuture(eventEndDate)) {



                        if (element.getFirstPropertyValue("categories") == 'Events') {

                            if (isDateInFuture(eventStartDate.setDate(eventStartDate.getDate() - 60))) {


                                listEvents.push({
                                    summary: element.getFirstPropertyValue("summary"),
                                    dtstart: element.getFirstPropertyValue("dtstart"),
                                    dtend: element.getFirstPropertyValue("dtend"),
                                    id: generateUUID(),
                                    soon: false,
                                    isDate: element.getFirstPropertyValue("dtstart").isDate,
                                    description: element.getFirstPropertyValue("description"),
                                    location: element.getFirstPropertyValue("location")
                                })


                                //console.log(element.getFirstPropertyValue('summary'))
                                //console.log(element.getFirstPropertyValue('dtstart'))

                            } else {
                                listEvents.push({
                                    summary: element.getFirstPropertyValue("summary"),
                                    dtstart: element.getFirstPropertyValue("dtstart"),
                                    dtend: element.getFirstPropertyValue("dtend"),
                                    id: generateUUID(),
                                    soon: true,
                                    isDate: element.getFirstPropertyValue("dtstart").isDate,
                                    description: element.getFirstPropertyValue("description"),
                                    location: element.getFirstPropertyValue("location")
                                })
                            }


                            //console.log(element.getFirstPropertyValue("dtstart").isDate)
                            //console.log(element.getFirstPropertyValue("dtstart") + "  -  " + element.getFirstPropertyValue("dtend"))
                        }
                    }
                }
            });
            setKalender(listEvents)
            setLoading(false)
        })



    }, [])

    function isDateInFuture(date) {
        return date > Date.now()
    }



    const [scrollViewWidth, setScrollViewWidth] = React.useState(0);
    const boxWidth = 330;
    const boxDistance = scrollViewWidth - boxWidth;
    const halfBoxDistance = boxDistance / 2;

    const pan = React.useRef(new Animated.ValueXY()).current;

    return (

        <View style={style.layout}>

            <Loader loading={loading} />



            {loading ? <View></View> :

                <FlatList
                    horizontal={true}

                    data={kalender}
                    contentInsetAdjustmentBehavior="never"
                    snapToAlignment="center"
                    decelerationRate="fast"
                    showsHorizontalScrollIndicator={false}
                    automaticallyAdjustContentInsets={false}
                    scrollEventThrottle={1}
                    renderItem={({ item }) => {

                        return (

                            <EventContainer
                                title={item.summary}
                                dtstart={addLeadingZeros(item.dtstart.day, 2) + '. ' + addLeadingZeros(item.dtstart.month, 2) + '. ' + item.dtstart.year}
                                dtend={addLeadingZeros(item.dtend.day, 2) + '. ' + addLeadingZeros(item.dtend.month, 2) + '. ' + item.dtend.year}
                                soon={item.soon}
                                isDate={item.isDate}
                                time={addLeadingZeros(item.dtstart.hour, 2) + ':' + addLeadingZeros(item.dtstart.minute, 2)}
                                dtstartyear={item.dtstart.year}
                                description={item.description}
                                location={item.location}
                            />

                        )

                    }}
                    onLayout={(e) => {
                        setScrollViewWidth(e.nativeEvent.layout.width);
                    }}
                    //contentInset={{
                    //    left: halfBoxDistance,
                    //    right: halfBoxDistance,
                    //}}

                    snapToInterval={boxWidth}

                />

            }


            <StatusBar style="dark" />
        </View>

    )


}


const style = StyleSheet.create({
    layout: {
        flex: 1,
        //alignItems: 'center',
    },

    sectionList: {
        //width: '100%',
        //flex: 1,


    },
    sectionListContainerStyle: {
        //marginHorizontal: 20,
        paddingTop: 140,
        //marginBottom: 80
    },


})






function generateUUID() {
    var d = new Date().getTime();
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
        d += performance.now();
    }
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx-xxxxxx3xx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}
function addLeadingZeros(num, totalLength) {
    return String(num).padStart(totalLength, '0');
}