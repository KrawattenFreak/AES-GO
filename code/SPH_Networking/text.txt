import React, { useRef, useState, Suspense, useMemo } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber/native'
import { useGLTF, Environment, Grid, Stage, useTexture, useFBX } from '@react-three/drei/native'
import useControls from "r3f-native-orbitcontrols"
import {
    View, Text, StyleSheet, Button
} from 'react-native';



import modelPath from '../../assets/3D/AESLowPolyREADY.glb'
import ao0gPath from '../../assets/3D/AO/AOGround0.png'
import ao0wPath from '../../assets/3D/AO/AOWall0.png'



function Model(props) {



    const mesh = useRef(null)
    const { scene, nodes } = useGLTF(modelPath)

    const ao0g = useTexture(ao0gPath)
    const ao0w = useTexture(ao0wPath)



    return (
        <group {...props} dispose={null}>
            < mesh
                castShadow
                receiveShadow
                geometry={nodes["0VIEWGround"].geometry}
                visible={props.vissl[0]}
                position={[4.63, 0.12, -0.74]}
                scale={8.76}


            >

                <meshPhysicalMaterial castShadow color='#46d4cd' attach={'material'} map={ao0g} />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["0VIEWWalls"].geometry}
                visible={props.vissl[0]}
                position={[-1.77, 0.54, 1.58]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={8.76}
            >
                <meshStandardMaterial castShadow color='white' attach={'material'} map={ao0w} />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["1VIEWGround"].geometry}
                visible={props.vissl[1]}
                position={[3.17, 1.76, -1.79]}

                scale={3.63}
            >
                <meshStandardMaterial castShadow color='#46d4cd' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["1VIEWWalls"].geometry}
                visible={props.vissl[1]}
                position={[0.84, 2.43, -0.5]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={2.89}
            >
                <meshStandardMaterial castShadow color='white' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["2VIEWWalls"].geometry}
                visible={props.vissl[2]}
                position={[-2.96, 3.85, -1.63]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={2.89}
            >
                <meshStandardMaterial castShadow color='white' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["2VIEWGround"].geometry}
                visible={props.vissl[2]}
                position={[-2.88, 3.03, -2.28]}

                scale={3.65}
            >
                <meshStandardMaterial castShadow color='#46d4cd' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["3VIEWGround"].geometry}
                visible={props.vissl[3]}
                position={[3.54, 4, -0.49]}

                scale={3.65}
            >
                <meshStandardMaterial castShadow color='#46d4cd' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["3VIEWWalls"].geometry}
                visible={props.vissl[3]}
                position={[2.28, 4.87, 1.28]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={2.89}
            >
                <meshStandardMaterial castShadow color='white' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["4VIEWWalls"].geometry}
                visible={props.vissl[4]}
                position={[0.75, 6.11, -0.94]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={2.89}
            >
                <meshStandardMaterial castShadow color='white' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["4VIEWGround"].geometry}
                visible={props.vissl[4]}
                position={[0.75, 6.11, -0.94]}
                rotation={[0, 0, -Math.PI / 2]}
                scale={2.89}
            >
                <meshStandardMaterial castShadow color='#46d4cd' />
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Dach.geometry}
                visible={props.vissl[5]}
                position={[-3.78, 5.02, -1.45]}
                scale={3.65}
            >
                <meshStandardMaterial castShadow color='white' />
            </mesh>
        </group>
    );
}







function Ground(props) {

    return (
        <mesh
            {...props}
            scale={200}
            rotation={[-Math.PI / 2, 0, 0]}
            castShadow
            receiveShadow
        >

            <planeGeometry args={[1, 1, 1]} />
            <meshStandardMaterial castShadow color='tomato' />

        </mesh>


    )

}






export default function TasksPage() {

    const [viewLayer, setViewLayer] = useState([true, true, true, true, true])


    const [OrbitControls, events] = useControls()

    return (

        <View {...events} style={{ flex: 1 }}>

            <View style={styles.controllerView}>
                <View style={styles.oneLayerControlView}>
                    <Button title='Etage -1' onPress={() => setViewLayer([true, false, false, false, false, false])}>

                    </Button>
                </View>
                <View style={styles.oneLayerControlView}>
                    <Button title='Etage 0-1' onPress={() => setViewLayer([true, true, false, false, false, false])}>

                    </Button>
                </View>
                <View style={styles.oneLayerControlView}>
                    <Button title='Etage 2' onPress={() => setViewLayer([true, true, true, false, false, false])}>

                    </Button>
                </View>
                <View style={styles.oneLayerControlView}>
                    <Button title='Etage 3' onPress={() => setViewLayer([true, true, true, true, false, false])}>

                    </Button>
                </View>
                <View style={styles.oneLayerControlView}>
                    <Button title='Etage4' onPress={() => setViewLayer([true, true, true, true, true, false])}>

                    </Button>
                </View>
                <View style={styles.oneLayerControlView}>
                    <Button title='Gesamt' onPress={() => setViewLayer([true, true, true, true, true, true])}>

                    </Button>
                </View>
            </View>

            <Canvas shadows>
                <color attach="background" args={['white']} />
                <Ground />
                <OrbitControls />
                <ambientLight intensity={1} />
                <directionalLight position={[10, 10, 10]} castShadow />
                <fog attach="fog" args={["white", 10, 40]} />

                <Suspense fallback={null}>
                    <Model scale={1} vissl={viewLayer} />
                </Suspense>

            </Canvas>

        </View >


    )
}


const styles = StyleSheet.create({

    controllerView: {
        position: 'absolute',
        width: 200,
        backgroundColor: 'white',
        top: 100,
        left: 50,
        padding: 20,
        borderRadius: 10,

        zIndex: 1
    },
    oneLayerControlView: {
        backgroundColor: '#f5f5f5',

    }

})